1)

To make the SVG code compatible for rendering in Flutter using the flutter_svg package, we need to remove the transform attribute, which is causing the "Bad state: illegal or unsupported transform: none" error. Additionally, we need to modify the viewBox and class attributes. Here's a step-by-step guide:

Remove the transform Attribute: Remove the transform attribute from the <svg> element. It's causing the error and is not necessary for rendering the SVG in Flutter.

Modify the viewBox Attribute: The viewBox attribute should be adjusted to match the dimensions of the SVG content. In this case, it's "0 0 15900 13580". Make sure it reflects the correct dimensions of your SVG content.

Remove the class Attribute: Remove the class attribute, as it's not directly supported in Flutter's rendering of SVG.

2)

To create documentation, use /// above your code.
you can use the following prompt to auto generate documentation
generate documentation for flutter in following format
/// description
///
/// parameters
///
/// example usage
///
/// default values
 for
 then in terminal write
 dart pub global activate dartdoc
 dartdoc

 3) https://data.gov.in/
 it has soo many apis and more for pincode and location use this

 4) when you use Image and add an image provider then the image cache is not updated, so using image.memory works pretty well or in other words reading bytes is what that makes the difference
 but this will keep on updating, for every setstate, its better to build another widget from the null statement.
 nope It was because of FlutterImageCompress.compressAndGetFile, as it returns a file which somehow couldn't be use for image, its mentioned in their documentation as well
 doing compression in on step and returning Unit8List and saving file in next step, and returning that unit8List solved the problem.

 5) Unique Key creates multiple copies on setState

 6) So the initialize of the future builder was running again and again, I added an intializationAlreadyDone variable but still I was seeing the loader and the app was restarting again n again.
 sol : the solution was to not return void but a bool, I dont know how it worked, but it was pretty amazing.

 7) analysis_options.yaml mein jaake i can change the rules of linter like     use_build_context_synchronously: false
                                                                               prefer_relative_imports: true
8) so whenever you dont want something to not run again, like when the keyboard appears in a stateful widget then make sure to create a widget of that in initstate
 refer future builder of [profile.dart]

 9) mujhe exactly to nahi samjha but regex is not good for email validation

 10) Problem with infinite scroll paganation (eg loading 10 posts then as soon as last one is reached the next 10 are loaded) so the problem is with the limitation of firebase, because I applied less than or greater than in the amount field its not possible for me to order by time stamp.
 so for now as the scale is pretty small then we will just call all the posts but that needs to change in future.
 Possibly. But why do you need to fetch it time wise ? So that I can get next posts on scrolling till the end and get latest on refresh.
 but is that necessary now ? no its not.
 # so one of my idea was to simplify it by taking leverage of how impeller works, i.e. building the widget as soon as it appears on the screen and use the recursion to build as soon as the last widget shows.
 It worked but only when i used ListView builder and nest them withing each other. which lead to scrolling issue.

11) the query fails if even one of document is not accessed by the security rules.

12) using if(<condition>) <Widget> is not right approach because there is a list of children, and the whole indexes of the children can change on condition its better to use (condition)?<Widget>:Center
